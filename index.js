'use strict';

let Network = require('./lib/network').Network;
let Perceptron = require('./lib/network').Perceptron;

module.exports = {
  Network, Perceptron
};


// let digit = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.765,0.82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.125,0.965,0.573,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.341,0.992,0.522,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.576,0.992,0.302,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.82,0.992,0.235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.016,0.843,0.996,0.235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.118,0.992,0.945,0.043,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.31,0.992,0.918,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.412,0.992,0.502,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.58,0.992,0.349,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.706,0.996,0.353,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.702,0.992,0.349,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.98,0.992,0.349,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.996,0.992,0.125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.263,0.996,0.992,0.059,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.294,1,0.898,0.035,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.157,0,0,0.365,0.996,0.514,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0,0,0.6,0.996,0.467,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.137,0.965,0.996,0.467,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.024,0.631,0.875,0.157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];

// class Bitmap {
//   constructor(bits, sizes) {
//     this.bits = bits;
//     this.sizes = sizes;
//   }

//   increase(desiredX, desiredY) {
//     let ratioX = Math.ceil(desiredX / this.sizes[0]);
//     let ratioY = Math.ceil(desiredY / this.sizes[1]);
//     let newBits = [];
//     for (let x = 0; x < this.sizes[0]; x++) {
//       for (let y = 0; y < this.sizes[1]; y++) {
//         let startX = x * ratioX;
//         let startY = y * ratioY;

//         for (let iX = 0; iX < ratioX; iX++) {
//           for (let iY = 0; iY < ratioY; iY++) {
//             let index = (startX + iX) * desiredY + (startY + iY);
//             newBits[index] = this.bits[x * this.sizes[0] + y];
//           }
//         }
//       }
//     }
//     return newBits;
//   }

//   decrease(desiredX, desiredY) {
//     let ratioX = Math.ceil(this.sizes[0] / desiredX);
//     let ratioY = Math.ceil(this.sizes[1] / desiredY);
//     let reduced = [];
//     for (let x = 0; x < desiredX; x++) {
//       for (let y = 0; y < desiredY; y++) {
//         let startX = x * ratioX;
//         let startY = y * ratioY;

//         let sum = 0;
//         for (let iX = 0; iX < ratioX; iX++) {
//           for (let iY = 0; iY < ratioY; iY++) {
//             let index = (startX + iX) * this.sizes[0] + (startY + iY);
//             sum += this.bits[index];
//           }
//         }
//         sum /= (ratioX * ratioY);
//         if (sum < 0.1) reduced.push(0);
//         else reduced.push(1);
//       }
//     }
//     return reduced;
//   }
// }

// let bitmap = new Bitmap(digit, [28,28]);
// let newBits = bitmap.increase(56,56);

// let str = '';
// for (var i = 1; i <= newBits.length; i++) {
//   str += newBits[i - 1] === 0 ? 0 : 1;

//   if (i % 56 === 0) {
//     str += '\n';
//   }
// }

// let fs = require('fs');
// fs.writeFileSync('tmp.txt', str)